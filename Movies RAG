{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b85f6fb0-052f-41b8-93f7-e4b71fdddfe1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import langchain\n",
    "import faiss\n",
    "import openai\n",
    "import streamlit as st\n",
    "import numpy as np\n",
    "import logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7f25c04-43f9-4f6e-ae7f-ff4df003fe34",
   "metadata": {},
   "outputs": [],
   "source": [
    "names = pd.read_table(\"/Users/jhajsidhu/Downloads/imdb_data/name.basics.tsv\", low_memory = False, encoding_errors = \"ignore\")\n",
    "basics = pd.read_table(\"/Users/jhajsidhu/Downloads/imdb_data/title.basics.tsv\", low_memory = False, encoding_errors = \"ignore\")\n",
    "crews = pd.read_table(\"/Users/jhajsidhu/Downloads/imdb_data/title.crew.tsv\", low_memory = False, encoding_errors = \"ignore\")\n",
    "principals = pd.read_table(\"/Users/jhajsidhu/Downloads/imdb_data/title.principals.tsv\", low_memory = False, encoding_errors = \"ignore\")\n",
    "ratings = pd.read_table(\"/Users/jhajsidhu/Downloads/imdb_data/title.ratings.tsv\", low_memory = False, encoding_errors = \"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d237b15-2d97-4bda-b9dc-b2c8244ebae3",
   "metadata": {},
   "outputs": [],
   "source": [
    "names = names.drop_duplicates(subset = \"nconst\")\n",
    "basics = basics.drop_duplicates(subset = \"tconst\")\n",
    "crews = crews.drop_duplicates(subset = \"tconst\")\n",
    "principals = principals.drop_duplicates(subset = \"tconst\")\n",
    "ratings = ratings.drop_duplicates(subset = \"tconst\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "42385a5b-98a3-4f94-9666-8c4e11f4f6c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      nconst     primaryName  birthYear  deathYear  \\\n",
      "0  nm0000001    Fred Astaire       1899       1987   \n",
      "1  nm0000002   Lauren Bacall       1924       2014   \n",
      "3  nm0000004    John Belushi       1949       1982   \n",
      "4  nm0000005  Ingmar Bergman       1918       2007   \n",
      "5  nm0000006  Ingrid Bergman       1915       1982   \n",
      "\n",
      "                    primaryProfession  \n",
      "0        actor,miscellaneous,producer  \n",
      "1  actress,soundtrack,archive_footage  \n",
      "3       actor,writer,music_department  \n",
      "4               writer,director,actor  \n",
      "5         actress,producer,soundtrack  \n"
     ]
    }
   ],
   "source": [
    "names = names.replace(\"\\\\N\", np.nan)\n",
    "names_columns = [\"nconst\", \"primaryName\", \"birthYear\", \"deathYear\", \"primaryProfession\"]\n",
    "names = names[names_columns]\n",
    "names[\"birthYear\"] = pd.to_numeric(names[\"birthYear\"], errors = \"coerce\").astype(\"Int64\")\n",
    "names[\"deathYear\"] = pd.to_numeric(names[\"deathYear\"], errors = \"coerce\").astype(\"Int64\")\n",
    "names = names.dropna(subset = [\"nconst\", \"primaryName\", \"birthYear\", \"deathYear\"])\n",
    "print(names.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e6920979-efb2-4e98-9318-dc6fc4183406",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      tconst            primaryTitle  startYear                    genres\n",
      "0  tt0000001              Carmencita       1894         Documentary,Short\n",
      "1  tt0000002  Le clown et ses chiens       1892           Animation,Short\n",
      "2  tt0000003            Poor Pierrot       1892  Animation,Comedy,Romance\n",
      "3  tt0000004             Un bon bock       1892           Animation,Short\n",
      "4  tt0000005        Blacksmith Scene       1893                     Short\n"
     ]
    }
   ],
   "source": [
    "basics = basics.replace(\"\\\\N\", np.nan)\n",
    "basics_columns = [\"tconst\", \"primaryTitle\", \"startYear\", \"genres\"]\n",
    "basics = basics[basics_columns]\n",
    "basics[\"startYear\"] = pd.to_numeric(basics[\"startYear\"], errors = \"coerce\").astype(\"Int64\")\n",
    "basics = basics.dropna(subset = [\"tconst\", \"primaryTitle\", \"startYear\"])\n",
    "print(basics.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a86d81c6-6237-4405-8cc2-d50d424151f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      tconst  directors    writers\n",
      "0  tt0000001  nm0005690        NaN\n",
      "1  tt0000002  nm0721526        NaN\n",
      "2  tt0000003  nm0721526  nm0721526\n",
      "3  tt0000004  nm0721526        NaN\n",
      "4  tt0000005  nm0005690        NaN\n"
     ]
    }
   ],
   "source": [
    "crews = crews.replace(\"\\\\N\", np.nan)\n",
    "crews_columns = [\"tconst\", \"directors\", \"writers\"]\n",
    "crews = crews[crews_columns]\n",
    "crews = crews.dropna(subset = [\"directors\", \"writers\"], how = \"all\")\n",
    "crews = crews.dropna(subset = [\"tconst\"])\n",
    "print(crews.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3a71b4c5-f4b6-49fc-9d36-96ed3a04a9f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       tconst  ordering     nconst  category  job      characters\n",
      "0   tt0000001         1  nm1588970      self  NaN        [\"Self\"]\n",
      "4   tt0000002         1  nm0721526  director  NaN             NaN\n",
      "6   tt0000003         1  nm0721526  director  NaN             NaN\n",
      "12  tt0000004         1  nm0721526  director  NaN             NaN\n",
      "14  tt0000005         1  nm0443482     actor  NaN  [\"Blacksmith\"]\n"
     ]
    }
   ],
   "source": [
    "principals = principals.replace(\"\\\\N\", np.nan)\n",
    "principals_columns = [\"tconst\", \"ordering\", \"nconst\", \"category\", \"job\", \"characters\"]\n",
    "principals = principals[principals_columns]\n",
    "principals = principals.dropna(subset = [\"tconst\", \"category\"])\n",
    "print(principals.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0363464f-9251-441b-9975-fb6de31fd3a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      tconst  averageRating  numVotes\n",
      "0  tt0000001            5.7      2163\n",
      "1  tt0000002            5.5       296\n",
      "2  tt0000003            6.5      2217\n",
      "3  tt0000004            5.3       189\n",
      "4  tt0000005            6.2      2955\n"
     ]
    }
   ],
   "source": [
    "ratings = ratings.replace(\"\\\\N\", np.nan)\n",
    "ratings_columns = [\"tconst\", \"averageRating\", \"numVotes\"]\n",
    "ratings = ratings[ratings_columns]\n",
    "ratings[\"numVotes\"] = pd.to_numeric(ratings[\"numVotes\"], errors = \"coerce\").astype(\"Int64\")\n",
    "ratings = ratings.dropna(subset = [\"tconst\", \"averageRating\", \"numVotes\"])\n",
    "print(ratings.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55da763e-458c-4f90-81c6-75e750ead68b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      tconst            primaryTitle  startYear                    genres  \\\n",
      "0  tt0000001              Carmencita       1894         Documentary,Short   \n",
      "1  tt0000002  Le clown et ses chiens       1892           Animation,Short   \n",
      "2  tt0000003            Poor Pierrot       1892  Animation,Comedy,Romance   \n",
      "3  tt0000004             Un bon bock       1892           Animation,Short   \n",
      "4  tt0000005        Blacksmith Scene       1893                     Short   \n",
      "\n",
      "   averageRating  numVotes         directorNames    writerNames  \\\n",
      "0            5.7      2163  William K.L. Dickson            NaN   \n",
      "1            5.5       296         Émile Reynaud            NaN   \n",
      "2            6.5      2217         Émile Reynaud  Émile Reynaud   \n",
      "3            5.3       189         Émile Reynaud            NaN   \n",
      "4            6.2      2955  William K.L. Dickson            NaN   \n",
      "\n",
      "             cast  \n",
      "0             NaN  \n",
      "1             NaN  \n",
      "2             NaN  \n",
      "3             NaN  \n",
      "4  Charles Kayser  \n"
     ]
    }
   ],
   "source": [
    "movies = pd.merge(basics, ratings, on = \"tconst\", how = \"left\")\n",
    "movies = pd.merge(movies, crews, on = \"tconst\", how = \"left\")\n",
    "get_name = dict(zip(names[\"nconst\"], names[\"primaryName\"]))\n",
    "movies[\"directorNames\"] = movies[\"directors\"].map(get_name)\n",
    "movies[\"writerNames\"] = movies[\"writers\"].map(get_name)\n",
    "movies_columns = [\"tconst\", \"primaryTitle\", \"startYear\", \"genres\", \"averageRating\", \"numVotes\", \"directorNames\", \"writerNames\"]\n",
    "movies = movies[movies_columns]\n",
    "cast = principals[principals[\"category\"].isin([\"actor\", \"actress\"])]\n",
    "cast = cast.merge(names[[\"nconst\", \"primaryName\"]], on = \"nconst\", how = \"left\")\n",
    "cast[\"ordering\"] = cast[\"ordering\"].astype(int)\n",
    "top_cast = (cast.sort_values([\"tconst\", \"ordering\"]).groupby(\"tconst\").head(5).groupby(\"tconst\")[\"primaryName\"].apply(lambda names_list: \", \".join(str(name) for name in names_list if isinstance(name, str) and name.strip())).reset_index().rename(columns = {\"primaryName\": \"cast\"}))\n",
    "movies = movies.merge(top_cast, on = \"tconst\", how = \"left\")\n",
    "print(movies.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "12075848-9cdc-4cd8-a56a-b81c1d21110a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             primaryTitle        genre\n",
      "0              Carmencita  Documentary\n",
      "0              Carmencita        Short\n",
      "1  Le clown et ses chiens    Animation\n",
      "1  Le clown et ses chiens        Short\n",
      "2            Poor Pierrot    Animation\n"
     ]
    }
   ],
   "source": [
    "movies[\"genre_list\"] = movies[\"genres\"].str.split(\",\")\n",
    "movies_sorted = movies.explode(\"genre_list\").rename(columns = {\"genre_list\": \"genre\"})\n",
    "movies_sorted[\"genre\"] = movies_sorted[\"genre\"].str.strip()\n",
    "movies_sorted = movies_sorted[movies_sorted[\"genre\"] != \"\"]\n",
    "print(movies_sorted[[\"primaryTitle\", \"genre\"]].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "409aa252-bdfd-4bbc-b5b6-d4b349d142df",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
